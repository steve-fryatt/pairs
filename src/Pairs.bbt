REM >!Pairs
REM
REM Copyright 1997-2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Pairs:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.
:
REM Play card matching games
:
LIBRARY "BASIC:Config"
LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:String"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Window"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:WimpSprite"
:
REM These values get replaced by tokenize.
:
build_version$ = "1.10"
build_date$ = "01 Jul 2009"
:
PROCwimperror_initialise("Pairs","!Pairs")
ON ERROR dummy%=FNwimperror_program : END
:
PROCinitialise
:
ON ERROR quit% = FNwimperror_program
:
WHILE NOT quit%
 PROCpoll(poll_mask%)
ENDWHILE
:
PROCclose_down
:
END
:
:
:
:
REM ====================================================================================================================
REM WIMP Poll routine and Event handlers
REM ====================================================================================================================
:
:
:
:
DEF PROCpoll(mask%)
:
REM Perform standard WIMP Poll
:
LOCAL reason%
:
SYS "Wimp_PollIdle",mask%,b%,next_null_poll_time% TO reason%
:
CASE reason% OF
 WHEN 0     : PROChandle_null_polls
 WHEN 1     : PROCredraw_main_window
 WHEN 2     : SYS "Wimp_OpenWindow",,b%
 WHEN 3     : SYS "Wimp_CloseWindow",,b%
              IF !b%=main_window% THEN
               PROCcancel_null_polls
               IF FNwindow_is_open(stats_window%) THEN PROCwindow_close(stats_window%)
              ENDIF
 WHEN 6     : PROChandle_mouse_clicks(!b%,b%!4,b%!12,b%!16,b%!8)
 WHEN 7     : dragging_options_bar%=FALSE : poll_mask%=old_poll_mask%
 WHEN 8     : PROChandle_keypress
 WHEN 9     : PROChandle_menu_selections(!b%,b%!4,b%!8)
 WHEN 17,18 : PROChandle_wimp_message
ENDCASE
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROChandle_null_polls
:
REM Deal with null poll events
:
LOCAL x%,y%
:
IF dragging_options_bar% THEN
 SYS "Wimp_GetPointerInfo",,b%
 IF mouse_drag_x%<>!b% THEN
  !q%=options_window%
  q%!4=16
  SYS "Wimp_DeleteIcon",,q%
  SYS "Wimp_GetWindowState",,q%
  options_icon%!12=!b%-q%!4+q%!20
  $FNicon_indirection(options_window%,12)=STR$((options_icon%!12-options_icon%!4) DIV 2)
  SYS "Wimp_CreateIcon",,options_icon%
  WAIT
  PROCicon_immediate_redraw(options_window%,12)
  PROCicon_immediate_redraw(options_window%,15)
  mouse_drag_x%=!b%
 ENDIF
  SYS "OS_ReadMonotonicTime" TO newtime%
  next_null_poll_time%=newtime%
ELSE
 PROChandle_null_poll_event(next_null_poll_type%)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROChandle_null_poll_event(type%)
next_null_poll_type%=0
next_sound_poll_type%=0
:
CASE type% OF
  WHEN 1 : another_turn%=FNcheck_and_memorise_cards
           PROCinitiate_null_poll(2)
           turns_for_current_card%(0)+=1 : total_turns%(0)+=1
  WHEN 2 : PROCflip_card_over(played_x%(0),played_y%(0)) : PROCinitiate_null_poll(3)
  WHEN 3 : PROCflip_card_over(played_x%(1),played_y%(1))
           IF another_turn% THEN
            PROCincrement_score(0)
            PROCcancel_null_polls : moves_left%=2
           ELSE
            PROCinitiate_null_poll(4)
           ENDIF
           PROCupdate_stats(0,another_turn%)
  WHEN 4 : x%=-1 : y%=-1
           PROCget_pair_of_cards(x%,y%)
           played_x%(0)=x% : played_y%(0)=y%
           PROCflip_card_over(played_x%(0),played_y%(0)) : REM Comp 1
           IF playing_sounds% THEN
            PROCcancel_null_polls
            next_sound_poll_type%=5
           ELSE
            PROCinitiate_null_poll(5)
           ENDIF
  WHEN 5 : x%=played_x%(0) : y%=played_y%(0)
           PROCget_single_matching_card(x%,y%)
           played_x%(1)=x% : played_y%(1)=y%
           PROCflip_card_over(played_x%(1),played_y%(1)) : REM Comp 2
           IF playing_sounds% THEN
            PROCcancel_null_polls
            next_sound_poll_type%=6
           ELSE
            PROCinitiate_null_poll(6)
           ENDIF
  WHEN 6 : another_turn%=FNcheck_and_memorise_cards
           PROCinitiate_null_poll(7)
           turns_for_current_card%(1)+=1 : total_turns%(1)+=1
  WHEN 7 : PROCflip_card_over(played_x%(0),played_y%(0)) : PROCinitiate_null_poll(8)
  WHEN 8 : PROCflip_card_over(played_x%(1),played_y%(1))
           IF another_turn% THEN PROCincrement_score(1)
           IF another_turn% AND cards_in_play%>0 THEN
            PROCinitiate_null_poll(4)
           ELSE
            PROCcancel_null_polls : moves_left%=2
           ENDIF
           PROCupdate_stats(1,another_turn%)
ENDCASE
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCredraw_main_window
:
REM Redraw the cards in the main window
:
LOCAL ox%,oy%,x%,y%,x1%,x2%,y1%,y2%,more%,sprite_name$
:
SYS "Wimp_RedrawWindow",,b% TO more%
:
ox%=b%!4-b%!20
oy%=b%!16-b%!24
:
WHILE more%
 x1%=(b%!28-ox%) DIV card_x%
 x2%=(87+b%!36-ox%) DIV card_x%
 IF x2%>=board_x% THEN x2%=board_x%-1
 y1%=(oy%-b%!40) DIV card_y%
 y2%=(87+oy%-b%!32) DIV card_y%
 IF y2%>=board_y% THEN y2%=board_y%-1
 IF x1%<=(board_x%-1) THEN
  FOR x%=x1% TO x2%
   IF y1%<=(board_y%-1) THEN
    FOR y%= y1% TO y2%
     IF board%(x%,y%)>-1 THEN
      IF state%(x%,y%) OR reveal% THEN sprite_name$=STR$(board%(x%,y%)) ELSE sprite_name$="null"
      SYS "Wimp_ReadPixTrans",&100,card_sprite_area%,sprite_name$,,,,q%,q%+16
      SYS "OS_SpriteOp",&134,card_sprite_area%,sprite_name$,ox%+8+x%*card_x%,oy%-(y%+1)*card_y%,&08,q%,q%+16
     ENDIF
    NEXT y%
   ENDIF
  NEXT x%
 ENDIF
 SYS "Wimp_GetRectangle",,b% TO more%
ENDWHILE
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROChandle_mouse_clicks(x%,y%,window%,icon%,buttons%)
:
REM Handle the mouse click
:
LOCAL xo%,yo%,val%,inc%,width%,height%
:
IF name_edit_icon%>-1 AND NOT (window%=main_window% AND icon%=name_edit_icon%) THEN PROCend_name_edit(FALSE)
:
CASE window% OF
 WHEN -2
  CASE buttons% OF
   WHEN 2 : PROCmenu_set_state(ibar_menu%,2,FALSE,NOT FNwindow_is_open(main_window%))
            PROCmenu_create_iconbar(ibar_menu%, x%)
   WHEN 4 : IF FNwindow_is_open(main_window%) THEN
             PROCwindow_open(main_window%)
            ELSE
             PROCstart_new_game
             !q%=main_window%
             SYS "Wimp_GetWindowInfo",,q% OR 1
             width%=(q%!52-q%!44)
             height%=(q%!56-q%!48)
             q%!4=screen_width%/2-width%/2
             q%!8=screen_height%/2-height%/2
             IF q%!8<96 THEN q%!8=96
             q%!12=q%!4+width%
             q%!16=q%!8+height%
             SYS "Wimp_OpenWindow",,q%
            ENDIF
  ENDCASE
 WHEN main_window%
  CASE buttons% OF
   WHEN 2 : PROCmenu_create(main_menu%,x%,y%)
   WHEN 4
    CASE icon% OF
     WHEN 2 : IF FNconfig_read_boolean("EditHuman") THEN PROCstart_name_edit(2)
     WHEN 3 : IF FNconfig_read_boolean("EditComputer") THEN PROCstart_name_edit(3)
     WHEN -1
      !q%=main_window%
      SYS "Wimp_GetWindowState",,q%
      xo%=x%-q%!4+q%!20
      yo%=y%-q%!16+q%!24+4
      IF (xo% MOD card_x%)>8 AND (yo% MOD card_y%)<-8 THEN PROCplay_card(xo% DIV card_x%,ABS(yo% DIV card_y%))
     ENDCASE
   ENDCASE
 WHEN options_window%
  CASE icon% OF
   WHEN 0 : CASE buttons% OF
              WHEN 1 : PROCopen_options_window(0,0)
              WHEN 4 : PROCwindow_close(options_window%)
             ENDCASE
   WHEN 1 : PROCset_options_details(TRUE) : IF buttons%=4 THEN PROCwindow_close(options_window%)
   WHEN 2 : PROCset_options_details(FALSE) : IF buttons%=4 THEN PROCwindow_close(options_window%)
   WHEN 21 : PROCmenu_create_popup(card_menu%,options_window%,21)
   WHEN 24,25 : val%=VAL($FNicon_indirection(options_window%,23))
                IF FNodd_number(VAL($FNicon_indirection(options_window%,27))) THEN inc%=2 ELSE inc%=1
                IF (icon%=24 AND buttons%=1) OR (icon%=25 AND buttons%=4) THEN val%+=inc% ELSE val%-=inc%
                IF val%>=4 AND val%<=20 THEN
                 $FNicon_indirection(options_window%,23)=STR$(val%)
                 PROCicon_redraw(options_window%,23)
                ENDIF
                inc%=VAL($FNicon_indirection(options_window%,27))*VAL($FNicon_indirection(options_window%,23))/2
                val%=VAL($FNicon_indirection(options_window%,31))
                IF val%>inc% THEN
                 $FNicon_indirection(options_window%,31)=STR$(inc%)
                 PROCicon_redraw(options_window%,31)
                ENDIF
   WHEN 28,29 : val%=VAL($FNicon_indirection(options_window%,27))
                IF FNodd_number(VAL($FNicon_indirection(options_window%,23))) THEN inc%=2 ELSE inc%=1
                IF (icon%=28 AND buttons%=1) OR (icon%=29 AND buttons%=4) THEN val%+=inc% ELSE val%-=inc%
                IF val%>=4 AND val%<=20 THEN
                 $FNicon_indirection(options_window%,27)=STR$(val%)
                 PROCicon_redraw(options_window%,27)
                ENDIF
                inc%=VAL($FNicon_indirection(options_window%,27))*VAL($FNicon_indirection(options_window%,23))/2
                val%=VAL($FNicon_indirection(options_window%,31))
                IF val%>inc% THEN
                 $FNicon_indirection(options_window%,31)=STR$(inc%)
                 PROCicon_redraw(options_window%,31)
                ENDIF
   WHEN 32,33 : val%=VAL($FNicon_indirection(options_window%,31))
                inc%=VAL($FNicon_indirection(options_window%,27))*VAL($FNicon_indirection(options_window%,23))/2
                IF inc%>card_sprites%(option_card_set%) THEN inc%=card_sprites%(option_card_set%)
                IF (icon%=32 AND buttons%=1) OR (icon%=33 AND buttons%=4) THEN val%+=1 ELSE val%-=1
                IF val%>=2 AND val%<=inc% THEN
                 $FNicon_indirection(options_window%,31)=STR$(val%)
                 PROCicon_redraw(options_window%,31)
                ENDIF
   WHEN 38,39 : PROCicon_bump_value(options_window%,37,(icon%=38 AND buttons%=1) OR (icon%=39 AND buttons%=4),1,99,0)
  ENDCASE
 IF buttons%=64 THEN PROCstart_drag_bar
ENDCASE
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROChandle_menu_selections(s1%,s2%,s3%)
:
REM Handle all menu selections
:
LOCAL reopen%,new_game%
:
SYS "Wimp_GetPointerInfo",,q%
reopen%=(q%!8=1)
:
CASE FNmenu_current_handle OF
 WHEN ibar_menu%
  CASE s1% OF
   WHEN 1 : OSCLI("%Filer_Run <Pairs$Dir>.!Help")
   WHEN 2 : PROCwindow_open_centred_at(stats_window%,!q%,q%!4)
   WHEN 3 : PROCopen_options_window(!q%,q%!4)
   WHEN 4 : quit%=TRUE
  ENDCASE
 WHEN main_menu%
  CASE s1% OF
   WHEN 0 : IF cards_in_play%>0 THEN
             new_game%=FNwimperror_report(FNmessage_lookup("KillGame"),4,%11,"")
            ELSE
             new_game%=1
            ENDIF
            IF new_game%=1 THEN PROCstart_new_game : PROCwindow_force_redraw(main_window%)
   WHEN 1 : reveal%=NOT reveal% : PROCwindow_force_redraw(main_window%)
  ENDCASE
 WHEN card_menu%
  option_card_set%=s1%
  $FNicon_indirection(options_window%,20)=card_sprite_files$(option_card_set%)
  PROCicon_redraw(options_window%,20)
  IF VAL($FNicon_indirection(options_window%,31))>card_sprites%(option_card_set%) THEN
   $FNicon_indirection(options_window%,31)=STR$(card_sprites%(option_card_set%))
   PROCicon_redraw(options_window%,31)
  ENDIF
  PROCtick_menu_item(card_menu%,option_card_set%)
ENDCASE
:
IF reopen% THEN PROCmenu_create(FNmenu_current_handle,0,0)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROChandle_keypress
CASE b%!24 OF
 WHEN 13 : IF !b%=main_window% AND b%!4=name_edit_icon% THEN PROCend_name_edit(TRUE)
 WHEN 27 : IF !b%=main_window% AND b%!4=name_edit_icon% THEN PROCend_name_edit(FALSE)
ENDCASE
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROChandle_wimp_message
:
REM Respond to WIMP messages from other tasks.
:
CASE b%!16 OF
 WHEN &0     : quit%=TRUE
 WHEN &502   : PROCsend_interactive_help
 WHEN &400C1 : PROCget_mode_size
 WHEN &4D14B : IF ((b%!20) AND &7)=0 AND next_sound_poll_type%<>0 THEN PROChandle_null_poll_event(next_sound_poll_type%)
ENDCASE
ENDPROC
:
:
:
:
:
:
:
:
REM ====================================================================================================================
REM Interactive help
REM ====================================================================================================================
:
:
:
:
DEF PROCsend_interactive_help
:
LOCAL token$,len%
:
REM Try and find an appropriate token for the window and icon currently under the pointer.
:
token$=""
:
CASE b%!32 OF
 WHEN -2           : token$="HelpH1"
 WHEN info_window% : token$="HelpH2"
 WHEN main_window% : token$="HelpMW"+STR$(b%!36+1)
 WHEN options_window% : CASE b%!36 OF
   WHEN 0,1,2       : token$="HelpCW"+STR$(b%!36)
   WHEN 6,7         : token$="HelpCW"+STR$(b%!36-3)
   WHEN 9,10        : token$="HelpCW"+STR$(b%!36-4)
   WHEN 12          : token$="HelpCW"+STR$(b%!36-5)
   WHEN 14,15,16    : token$="HelpCW"+STR$(b%!36-6)
   WHEN 20,21       : token$="HelpCW"+STR$(b%!36-9)
   WHEN 23,24,25    : token$="HelpCW"+STR$(b%!36-10)
   WHEN 27,28,29    : token$="HelpCW"+STR$(b%!36-11)
   WHEN 31,32,33    : token$="HelpCW"+STR$(b%!36-12)
   WHEN 37,38,39    : token$="HelpCW"+STR$(b%!36-15)
   WHEN 41          : token$="HelpCW"+STR$(b%!36-16)
  ENDCASE
 WHEN stats_window% : CASE b%!36 OF
   WHEN 0,1,9  : token$="HelpST0"
   WHEN 4,5,12 : token$="HelpST1"
   WHEN 6,7,11 : token$="HelpST2"
   WHEN 8,10   : token$="HelpST3"
  ENDCASE
 OTHERWISE
  SYS "Wimp_GetMenuState",1,q%,b%!32,b%!36
  CASE FNmenu_current_handle OF
   WHEN ibar_menu% : IF !q%>-1 THEN token$="MenuIB"+STR$(!q%)
   WHEN main_menu% : IF !q%>-1 THEN token$="MenuMM"+STR$(!q%)
  ENDCASE
ENDCASE
:
REM If a token was found, look it up and reply to the help request.
:
IF token$<>"" THEN
 SYS "MessageTrans_Lookup",message_block%,token$,b%+20,235 TO ,,,len%
 :
 b%!12=b%!8
 b%!16=&503
 !b%=24+(len% AND &FFFFFC)
 SYS "Wimp_SendMessage",17,b%,b%!4
ENDIF
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Initialisation and Shut Down routines
REM ====================================================================================================================
:
:
:
:
DEF PROCinitialise
:
REM Initialise the program
:
REM WIMP initialisation first
:
DIM a% 255, b% 4096, q% 255
:
task_name$="Pairs"
poll_mask%=&1831
quit%=FALSE
dragging_options_bar%=FALSE
:
resource_path$=FNresources_find_territory_folder("<Pairs$Dir>.Resources")
:
DIM message_block% 16
SYS "MessageTrans_FileInfo",,resource_path$+"Messages" TO flags%,,message_size%
DIM message_buffer% message_size%
SYS "MessageTrans_OpenFile",message_block%,resource_path$+"Messages",message_buffer%
:
task_name$=FNmessage_lookup("TaskName")
task_sprite$=FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(task_name$,task_sprite$)
:
$b%="TASK"
!q%=&502
q%!4=&400C1 : REM Message mode change
q%!8=&4D14B : REM Message PlayIt status change
q%!12=0
SYS "Wimp_Initialise",310,!b%,task_name$,q% TO wimp_version%,task_handle%
:
SYS "XOS_SWINumberFromString",,"Wimp_TextOp" TO ;flags%
wimp_text_op%=(flags% AND 1)=0
:
REM Register with PlayIt
:
playit_available%=FALSE
SYS "XOS_SWINumberFromString",,"PlayIt_Version" TO ;flags%
IF (flags% AND 1)=0 THEN
 SYS "PlayIt_Version" TO playit_version%
 IF playit_version%>=159 THEN
  SYS "PlayIt_ClientOp",0,0
  playit_available%=TRUE
  SYS "XWimp_StartTask","Desktop_PlayIt" TO ;flags%
  IF (flags% AND 1)=1 THEN playit_available%=FALSE
 ENDIF
ENDIF
playing_sounds%=playit_available%
:
REM Set up the options
:
PROCconfig_initialise(12,task_name$)
PROCconfig_init_integer("Forgetfulness",75)
PROCconfig_init_string("CardSprites","Shapes")
PROCconfig_init_integer("BoardX",8)
PROCconfig_init_integer("BoardY",8)
PROCconfig_init_integer("DifferentCards",16)
PROCconfig_init_integer("ViewDelay",2)
PROCconfig_init_string("HumanName",FNmessage_lookup("Human"))
PROCconfig_init_string("ComputerName",FNmessage_lookup("Computer"))
PROCconfig_init_boolean("EditHuman",TRUE)
PROCconfig_init_boolean("EditComputer",FALSE)
PROCconfig_init_integer("Guttering",8)
PROCconfig_init_boolean("UseSound",FALSE)
:
choices_load$="Choices:Pairs.Choices"
SYS "XOS_File",17,choices_load$ TO choices_type% ;flags%
IF (flags% AND 1)<>0 OR choices_type%<>1 THEN choices_load$="Pairs:Choices"
choices_save$=FNconfig_load_file(choices_load$)
:
REM Load the window tamplates
:
indirected_size%=2048
DIM indirected_data% indirected_size%, options_icon% 35
:
PROCtemplate_open(resource_path$+"Templates")
PROCtemplate_load("Main",b%,indirected_data%,indirected_size%,-1)
SYS "Wimp_CreateWindow",,b% TO main_window%
PROCtemplate_load("ProgInfo",b%,indirected_data%,indirected_size%,-1)
SYS "Wimp_CreateWindow",,b% TO info_window%
PROCtemplate_load("Stats",b%,indirected_data%,indirected_size%,-1)
SYS "Wimp_CreateWindow",,b% TO stats_window%
PROCtemplate_load("Options",b%,indirected_data%,indirected_size%,-1)
PROCcopy_icon_definition(b%,16,options_icon%+4)
SYS "Wimp_CreateWindow",,b% TO options_window%
!options_icon%=options_window%
PROCtemplate_close
:
$FNicon_indirection(info_window%,4)=CHR$(169) + " Stephen Fryatt, 1997-" + MID$(build_date$, 8)
$FNicon_indirection(info_window%,6)=build_version$+" ("+build_date$+")"
:
name_edit_icon%=-1
DIM name_edit_validation$(1)
name_edit_validation$(0)=$FNicon_validation(main_window%,2)
name_edit_validation$(1)=$FNicon_validation(main_window%,3)
$FNicon_validation(main_window%,2)=""
$FNicon_validation(main_window%,3)=""
:
PROCmenu_initialise
!b%=info_window%
PROCmenu_load_templates(resource_path$+"Menus",b%)
ibar_menu%=!b%
main_menu%=b%!4
:
REM Set up the sprite area and load the default sprites in.
:
max_card_sprite_files%=77
DIM card_sprite_files$(max_card_sprite_files%-1),card_sprites%(max_card_sprite_files%-1)
DIM card_menu% 28+24*max_card_sprite_files%
card_sprite_file_path$="<Pairs$Dir>.Cards"
:
loaded_card_set$=""
card_sprite_area%=HIMEM
SYS "Wimp_SlotSize",-1,-1 TO base_wimp_slot%

IF FNmake_card_sprite_list_and_menu(card_sprite_file_path$)=0 THEN
 PROCwimperror_report(FNmessage_lookup("NoSprs"),2,%10,"")
 quit%=TRUE
 ENDPROC
ENDIF
:
REM Now do the game initialisation
:
next_null_poll_type%=0
next_sound_poll_type%=0
next_null_poll_time%=0
DIM poll_times%(8)
:
max_board_x%=20
max_board_y%=20
max_types%=32
:
DIM board%(max_board_x%-1,max_board_x%-1), state%(max_board_x%-1,max_board_x%-1)
DIM played_x%(1), played_y%(1)
DIM types%(max_types%-1,1), unknown%(1), pairs%(max_board_x%*max_board_y%-1,3)
DIM scores%(1),turns_for_current_card%(1),total_turns%(1)
cards_in_play%=0
turn_count%=0
reveal%=FALSE
:
PROCget_mode_size
ibar_icon%=FNicon_create_standard_bar(-1,task_sprite$)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCclose_down
:
REM Close down the program
:
IF playit_available% THEN
 SYS "XPlayIt_ClientOp",1 TO ,clients% ;flags%
 IF (flags% AND 1)=0 AND clients%=0 THEN OSCLI("%RMKill PlayIt")
ENDIF
:
SYS "Wimp_CloseDown"
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Game playing routines
REM ====================================================================================================================
:
:
:
:
DEF PROCstart_new_game
:
show_card_delay%=FNconfig_read_integer("ViewDelay")
cards%=FNconfig_read_integer("DifferentCards")
forgetfulness%=FNconfig_read_integer("Forgetfulness")
playing_sounds%=FNconfig_read_boolean("UseSound") AND playit_available%
poll_times%()=0,show_card_delay%*50,50,50,50,50,show_card_delay%*50,50,50
another_turn%=FALSE
PROCload_card_sprites(card_sprite_file_path$,FNconfig_read_string("CardSprites"),playing_sounds%)
$FNicon_indirection(main_window%,2)=FNconfig_read_string("HumanName")
$FNicon_indirection(main_window%,3)=FNconfig_read_string("ComputerName")
$FNicon_indirection(stats_window%,2)=FNconfig_read_string("HumanName")
$FNicon_indirection(stats_window%,3)=FNconfig_read_string("ComputerName")
:
REM Set the window details
:
guttering%=FNconfig_read_integer("Guttering")
:
SYS "OS_SpriteOp",&128,card_sprite_area%,"null" TO ,,,card_x%,card_y%
card_x%=(card_x%<<screen_xeig%)+guttering%
card_y%=(card_y%<<screen_yeig%)+guttering%
:
board_x%=FNconfig_read_integer("BoardX")
board_y%=FNconfig_read_integer("BoardY")
IF FNodd_number(board_x%*board_y%) THEN
 IF board_x%<20 THEN board_x%+=1 ELSE board_y%+=1
ENDIF
:
!q%=main_window%
SYS "Wimp_GetWindowInfo",,q% OR 1
q%!48=-(board_y%*card_y%+guttering%)
q%!52=board_x%*card_x%+guttering%
SYS "Wimp_SetExtent",!q%,q%+44
SYS "Wimp_OpenWindow",,q%
:
REM Shuffle icons along
:
PROCsize_main_icons(TRUE)
:
REM Start a new game
:
LOCAL loop%,x%,y%
:
REM Reset the list headers for the known types.
:
FOR loop%=0 TO max_types%-1
 types%(loop%,0)=0
 types%(loop%,1)=-1
NEXT loop%
:
loop%=0
FOR x%=0 TO board_x%-1
 FOR y%=0 TO board_y%-1
  pairs%(loop%,0)=TRUE
  pairs%(loop%,1)=loop%+1
  pairs%(loop%,2)=x%
  pairs%(loop%,3)=y%
  loop%+=1
 NEXT y%
NEXT x%
pairs%(loop%-1,1)=-1
unknown%(0)=loop%
unknown%(1)=0
:
cards_in_play%=board_x%*board_y%
:
moves_left%=2
PROCcancel_null_polls
PROCreset_scores
PROCshuffle_cards(cards%)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCsize_main_icons(change_width%)
:
LOCAL width%,anchor%
:
IF change_width% THEN
 !q%=main_window%
 q%!4=1
 SYS "Wimp_GetIconState",,q%
 SYS "Wimp_DeleteIcon",,q%
 width%=q%!16-q%!8
 q%!16=board_x%*card_x%+guttering%-12
 q%!8=q%!16-width%
 anchor%=q%!8-2
 q%!4=main_window%
 SYS "Wimp_CreateIcon",,q%+4
ENDIF
:
!q%=main_window%
q%!4=2
SYS "Wimp_GetIconState",,q%
q%!100=main_window%
q%!104=3
SYS "Wimp_GetIconState",,q%+100
:
IF change_width% THEN q%!116=anchor%
available_width%=q%!116-q%!8
IF wimp_text_op% THEN
 SYS "Wimp_TextOp",1,q%!28,0 TO width1%
 SYS "Wimp_TextOp",1,q%!128,0 TO width2%
ELSE
  width1%=LEN(FNstring_read(q%!28))*16
  width2%=LEN(FNstring_read(q%!128))*16
ENDIF
:
IF width1%+width2%+6<available_width% AND (width1%+4>(available_width%/2) OR width2%+4>(available_width%/2)) THEN
 div_pt%=q%!8+width1%+((available_width%-(width1%+width2%))/2)
ELSE
 div_pt%=(board_x%*card_x%+guttering%)/2
ENDIF
:
q%!16=div_pt%-2
q%!108=div_pt%+2
:
SYS "Wimp_DeleteIcon",,q%
q%!4=main_window%
SYS "Wimp_CreateIcon",,q%+4
:
SYS "Wimp_DeleteIcon",,q%+100
q%!104=main_window%
SYS "Wimp_CreateIcon",,q%+104
SYS "Wimp_ForceRedraw",main_window%,q%!8,q%!12,q%!116,q%!20
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCshuffle_cards(cards%)
:
REM 'Shuffle' the cards and place them on the board.
:
LOCAL x%,y%,card%,copy%,copies%(),error%
:
DIM copies%(cards%-1)
copies%()=(cards_in_play% DIV cards%)
IF FNodd_number(copies%(0)) THEN copies%()-=1
IF (copies%(0)*cards%)<cards_in_play% THEN
 FOR copy%=0 TO (cards_in_play%-(copies%(0)*cards%))/2 -1
  copies%(copy%)+=2
 NEXT copy%
ENDIF
:
board%()=-1
state%()=FALSE
:
error%=FALSE
:
FOR card%=0 TO cards%-1
 IF FNodd_number(copies%(card%)) THEN error%=TRUE
 FOR copy%=1 TO copies%(card%)
  x%=RND(board_x%)-1
  y%=RND(board_y%)-1
  WHILE board%(x%,y%)<>-1
   x%+=1
   IF x%>=board_x% THEN x%=0 : y%+=1
   IF y%>=board_y% THEN y%=0
  ENDWHILE
  board%(x%,y%)=card%
 NEXT copy%
NEXT card%
IF error% THEN PROCwimperror_report(FNmessage_lookup("BadBoard"),2,%01,"")
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCplay_card(x%,y%)
:
REM Allow the player to turn a card over and see it.
:
IF moves_left%>0 THEN
 IF state%(x%,y%)=FALSE AND board%(x%,y%)<>-1 THEN
  PROCflip_card_over(x%,y%)
  played_x%(2-moves_left%)=x%
  played_y%(2-moves_left%)=y%
  moves_left%-=1
 ENDIF
 IF moves_left%=0 THEN PROCstart_computer_player
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCstart_computer_player
:
REM Initialte the computer's player, to go in null polls.
:
PROCforget_cards
IF playing_sounds% THEN
 next_sound_poll_type%=1
ELSE
 PROCinitiate_null_poll(1)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCinitiate_null_poll(code%)
:
REM Arrange call back for next stage of computer play
:
LOCAL newtime%
:
SYS "OS_ReadMonotonicTime" TO newtime%
next_null_poll_time%=newtime%+poll_times%(code%)
next_null_poll_type%=code%
poll_mask%=poll_mask% AND NOT %1
next_sound_poll_type%=0
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCcancel_null_polls
:
REM Cancel reception of null polls.
:
poll_mask%=poll_mask% OR %1
next_null_poll_type%=0
next_sound_poll_type%=0
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF FNcheck_and_memorise_cards
:
REM Check if cards were a pair and remeber them.
:
LOCAL loop%,ptr%,last%,type%,pair%
:
FOR loop%=0 TO 1
 IF unknown%(0)>0 THEN
  last%=-1
  ptr%=unknown%(1)
  WHILE pairs%(ptr%,1)<>-1 AND (pairs%(ptr%,2)<>played_x%(loop%) OR pairs%(ptr%,3)<>played_y%(loop%))
   last%=ptr%
   ptr%=pairs%(ptr%,1)
  ENDWHILE
  IF pairs%(ptr%,2)=played_x%(loop%) AND pairs%(ptr%,3)=played_y%(loop%) THEN
   unknown%(0)-=1
   IF last%=-1 THEN unknown%(1)=pairs%(ptr%,1) ELSE pairs%(last%,1)=pairs%(ptr%,1)
   type%=board%(played_x%(loop%),played_y%(loop%))
   types%(type%,0)+=1
   pairs%(ptr%,1)=types%(type%,1)
   types%(type%,1)=ptr%
  ENDIF
 ENDIF
NEXT loop%
:
pair%=FALSE
:
IF board%(played_x%(0),played_y%(0))=board%(played_x%(1),played_y%(1)) THEN
 pair%=TRUE
 FOR loop%=0 TO 1
  type%=board%(played_x%(loop%),played_y%(loop%))
  IF types%(type%,0)>0 THEN
   last%=-1
   ptr%=types%(type%,1)
   WHILE pairs%(ptr%,1)<>-1 AND (pairs%(ptr%,2)<>played_x%(loop%) OR pairs%(ptr%,3)<>played_y%(loop%))
    last%=ptr%
    ptr%=pairs%(ptr%,1)
   ENDWHILE
   IF pairs%(ptr%,2)=played_x%(loop%) AND pairs%(ptr%,3)=played_y%(loop%) THEN
    types%(type%,0)-=1
    IF last%=-1 THEN types%(type%,1)=pairs%(ptr%,1) ELSE pairs%(last%,1)=pairs%(ptr%,1)
   ENDIF
  ENDIF
 board%(played_x%(loop%),played_y%(loop%))=-1
 cards_in_play%-=1
 NEXT loop%
ENDIF
=pair%
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCforget_cards
:
REM Make the computer forget some of the cards it knows.
:
LOCAL loop%,ptr%,last%,temp%
:
FOR loop%=0 TO 15
 ptr%=types%(loop%,1)
 last%=-1
 WHILE ptr%<>-1
  IF RND(100)<=forgetfulness% THEN
   unknown%(0)+=1
   types%(loop%,0)-=1
   temp%=pairs%(ptr%,1)
   IF last%=-1 THEN types%(loop%,1)=pairs%(ptr%,1) ELSE pairs%(last%,1)=pairs%(ptr%,1)
   pairs%(ptr%,1)=unknown%(1)
   unknown%(1)=ptr%
   ptr%=temp%
  ELSE
   last%=ptr%
   ptr%=pairs%(ptr%,1)
  ENDIF
 ENDWHILE
NEXT loop%
ENDPROC
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCflip_card_over(x%,y%)
:
REM Flip a card over on the board.
:
state%(x%,y%)=NOT state%(x%,y%)
PROCforce_card_redraw(x%,y%)
IF playit_available% AND playing_sounds% AND state%(x%,y%) THEN
 SYS "XPlayIt_Open",card_sprite_file_path$+"."+loaded_card_set$+".Sounds."+STR$(board%(x%,y%)),0 TO ;flags%
 IF (flags% AND 1)=0 THEN SYS "PlayIt_Play"
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCget_pair_of_cards(RETURN x%, RETURN y%)
:
REM Find a pair of cards to turn up and return second of them, else pick one at random
:
LOCAL loop%,type%
:
type%=-1
:
FOR loop%=0 TO 15
 IF types%(loop%,0)>=2 THEN type%=loop%
NEXT loop%
:
IF type%=-1 THEN
 PROCget_random_unknown_card(x%,y%)
ELSE
 x%=pairs%(pairs%(types%(type%,1),1),2)
 y%=pairs%(pairs%(types%(type%,1),1),3)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCget_single_matching_card(RETURN x%, RETURN y%)
:
REM Find a pair of cards to turn up and return second of them, else pick one at random
:
LOCAL type%
:
type%=board%(x%,y%)
IF types%(type%,0)=0 THEN
 PROCget_random_unknown_card(x%,y%)
ELSE
 x%=pairs%(types%(type%,1),2)
 y%=pairs%(types%(type%,1),3)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCget_random_unknown_card(RETURN x%, RETURN y%)
:
REM Returns a card at random from the unknown list, different from the one passed.
:
LOCAL rnd%,ptr%
:
REPEAT
 rnd%=RND(unknown%(0))-1
 ptr%=unknown%(1)
 WHILE rnd%>0
  ptr%=pairs%(ptr%,1)
  rnd%-=1
 ENDWHILE
UNTIL pairs%(ptr%,2)<>x% OR pairs%(ptr%,3)<>y%
:
x%=pairs%(ptr%,2)
y%=pairs%(ptr%,3)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCreset_scores
:
REM Reset the scores and update the window.
:
scores%()=0
$FNicon_indirection(main_window%,0)="0"
$FNicon_indirection(main_window%,1)="0"
PROCicon_redraw(main_window%,0)
PROCicon_redraw(main_window%,1)
:
turn_count%=0
turns_for_current_card%()=0
total_turns%()=0
$FNicon_indirection(stats_window%,0)="0"
$FNicon_indirection(stats_window%,1)="0"
$FNicon_indirection(stats_window%,4)="0"
$FNicon_indirection(stats_window%,5)="0"
$FNicon_indirection(stats_window%,6)="0"
$FNicon_indirection(stats_window%,7)="0"
$FNicon_indirection(stats_window%,8)="0"
IF FNwindow_is_open(stats_window%) THEN
 PROCicon_redraw(stats_window%,0)
 PROCicon_redraw(stats_window%,1)
 PROCicon_redraw(stats_window%,4)
 PROCicon_redraw(stats_window%,5)
 PROCicon_redraw(stats_window%,6)
 PROCicon_redraw(stats_window%,7)
 PROCicon_redraw(stats_window%,8)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCincrement_score(p%)
:
REM Increment and redisplay one of the scores.
:
scores%(p%)+=1
$FNicon_indirection(main_window%,p%)=STR$(scores%(p%))
PROCicon_redraw(main_window%,p%)
$FNicon_indirection(stats_window%,p%)=STR$(scores%(p%))
IF FNwindow_is_open(stats_window%) THEN
 PROCicon_redraw(stats_window%,p%)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCupdate_stats(player%,pair%)

IF turns_for_current_card%(player%)>VAL($FNicon_indirection(stats_window%,6+player%)) THEN
 $FNicon_indirection(stats_window%,6+player%)=STR$(turns_for_current_card%(player%))
 IF FNwindow_is_open(stats_window%) THEN PROCicon_redraw(stats_window%,6+player%)
ENDIF
IF pair% THEN turns_for_current_card%(player%)=0

:
IF scores%(player%)>0 THEN
 $FNicon_indirection(stats_window%,4+player%)=STR$(INT(total_turns%(player%)/scores%(player%)))
ELSE
 $FNicon_indirection(stats_window%,4+player%)=STR$(total_turns%(player%))
ENDIF
IF FNwindow_is_open(stats_window%) THEN PROCicon_redraw(stats_window%,4+player%)

REM Only update the turn count if the second player has finished.
:
IF player%=1 AND NOT pair% THEN
 turn_count%+=1
 $FNicon_indirection(stats_window%,8)=STR$(turn_count%)
 IF FNwindow_is_open(stats_window%) THEN PROCicon_redraw(stats_window%,8)
ENDIF
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Card sprite handling
REM ====================================================================================================================
:
:
:
:
DEF FNmake_card_sprite_list_and_menu(path$)
:
REM Read all the sprite files in the given directory into an array and build a menu to
REM display the list
:
LOCAL files%,width%,offset%,read%,loop%,file$,file%
:
REM First scan the directory and fill the array card_sprite_files$() with the names of
REM any sprite files we find therein.
:
offset%=0
files%=0
width%=0
:
REPEAT
 SYS "OS_GBPB",10,path$,q%,1,offset%,255,"*" TO ,,,read%,offset%
 IF read%>0 AND q%!16=2 THEN
  SYS "XOS_GenerateError", q% + 20 TO file$
  card_sprite_files$(files%)=file$
  IF LEN(file$)>width% THEN width%=LEN(file$)
  :
  file%=OPENIN(path$+"."+file$+".Sprites")
  SYS "OS_GBPB",3,file%,q%,4,0
  card_sprites%(files%)=!q%-1
  CLOSE#file%
  :
  files%+=1
 ENDIF
UNTIL offset%=-1 OR files%>=max_card_sprite_files%
:
REM Now use the names to create a menu containing the sprite files that can be used to
REM display the cards.
:
$card_menu%=FNmessage_lookup("CardMenu")
card_menu%!12=&00070207
card_menu%!16=(width%+1)*16
card_menu%!20=&2C
card_menu%!24=&0
:
FOR loop%=0 TO files%-1
 IF loop%=files%-1 THEN card_menu%!(28+loop%*24)=&80 ELSE card_menu%!(28+loop%*24)=&00
 card_menu%!(28+loop%*24+4)=-1
 card_menu%!(28+loop%*24+8)=&07000021
 $(card_menu%+28+loop%*24+12)=LEFT$(card_sprite_files$(loop%),12)
NEXT loop%
=files%
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCload_card_sprites(path$,set$,RETURN use_sounds%)
:
LOCAL size%,new_size%,real_set$
:
IF set$<>loaded_card_set$ THEN
 real_set$=set$
 :
 set$+=".Sprites"
 SYS "OS_File",17,path$+"."+set$+FNwimpsprite_file_suffix TO type%
 IF type%=1 THEN set$+=FNwimpsprite_file_suffix
 :
 SYS "OS_File",17,path$+"."+set$ TO type%,,,,size%
 IF type%<>1 THEN
  PROCwimperror_report(FNmessage_lookup("SprsNotFound"),2,%10,"")
  set$=card_sprite_files$(0)
  real_set$=set$
  :
  set$+=".Sprites"
  SYS "OS_File",17,path$+"."+set$+FNwimpsprite_file_suffix TO type%
  IF type%=1 THEN set$+=FNwimpsprite_file_suffix
  :
  SYS "OS_File",17,path$+"."+set$ TO type%,,,,size%
 ENDIF
 size%+=4
 :
 SYS "Wimp_SlotSize",base_wimp_slot%+size%,-1 TO new_size%
 IF new_size%<size% THEN PROCwimperror_report(FNmessage_lookup("NoSprRoom"),2,%10,"") : ENDPROC
 :
 !card_sprite_area%=size%
 card_sprite_area%!8=16
 SYS "OS_SpriteOp",&10A,card_sprite_area%,path$+"."+set$
 :
 loaded_card_set$=real_set$
 :
 SYS "OS_File",17,path$+"."+real_set$+".Sounds" TO type%
 use_sounds%=use_sounds% AND (type%=2)
ENDIF
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Choices management
REM ====================================================================================================================
:
:
:
:
DEF PROCopen_options_window(x%,y%)
:
REM Set up the options window and open it
:
LOCAL sprites$,loop%,card_sets%
:
!q%=options_window%
q%!4=16
SYS "Wimp_DeleteIcon",,q%
options_icon%!12=options_icon%!4+2*FNconfig_read_integer("Forgetfulness")
SYS "Wimp_CreateIcon",,options_icon%
:
$FNicon_indirection(options_window%,6)=FNconfig_read_string("HumanName")
$FNicon_indirection(options_window%,9)=FNconfig_read_string("ComputerName")
$FNicon_indirection(options_window%,12)=STR$(FNconfig_read_integer("Forgetfulness"))
$FNicon_indirection(options_window%,20)=FNconfig_read_string("CardSprites")
$FNicon_indirection(options_window%,23)=STR$(FNconfig_read_integer("BoardX"))
$FNicon_indirection(options_window%,27)=STR$(FNconfig_read_integer("BoardY"))
$FNicon_indirection(options_window%,31)=STR$(FNconfig_read_integer("DifferentCards"))
$FNicon_indirection(options_window%,37)=STR$(FNconfig_read_integer("ViewDelay"))
:
card_sets%=FNmake_card_sprite_list_and_menu(card_sprite_file_path$)
sprites$=FNstring_to_upper(FNconfig_read_string("CardSprites"))
option_card_set%=0
FOR loop%=0 TO card_sets%-1
 IF FNstring_to_upper(card_sprite_files$(loop%))=sprites$ THEN option_card_set%=loop%
NEXT loop%
PROCtick_menu_item(card_menu%,option_card_set%)
:
PROCicon_set_selected(options_window%,7,FNconfig_read_boolean("EditHuman"))
PROCicon_set_selected(options_window%,10,FNconfig_read_boolean("EditComputer"))
PROCicon_set_state(options_window%,41,FNconfig_read_boolean("UseSound"),NOT playit_available%,FALSE)
:
IF FNwindow_is_open(options_window%) THEN
 PROCicon_redraw(options_window%,6)
 IF FNicon_test_for_caret(options_window%,6) THEN PROCicon_put_caret_at_end(options_window%,6)
 PROCicon_redraw(options_window%,9)
 IF FNicon_test_for_caret(options_window%,9) THEN PROCicon_put_caret_at_end(options_window%,9)
 PROCicon_redraw(options_window%,12)
 IF FNicon_test_for_caret(options_window%,12) THEN PROCicon_put_caret_at_end(options_window%,12)
 PROCicon_redraw(options_window%,15)
 PROCicon_redraw(options_window%,20)
 PROCicon_redraw(options_window%,31)
 PROCicon_redraw(options_window%,37)
 IF FNicon_test_for_caret(options_window%,37) THEN PROCicon_put_caret_at_end(choices_window%,37)
ELSE
 PROCwindow_open_centred_at(options_window%,x%,y%)
 PROCicon_put_caret_at_end(options_window%,6)
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCset_options_details(save%)
:
REM Get the options details from the options window
:
LOCAL new_choices%,len%
:
PROCconfig_set_string("HumanName",$FNicon_indirection(options_window%,6))
PROCconfig_set_string("ComputerName",$FNicon_indirection(options_window%,9))
PROCconfig_set_integer("Forgetfulness",VAL($FNicon_indirection(options_window%,12)))
PROCconfig_set_string("CardSprites",card_sprite_files$(option_card_set%))
PROCconfig_set_integer("BoardX",VAL($FNicon_indirection(options_window%,23)))
PROCconfig_set_integer("BoardY",VAL($FNicon_indirection(options_window%,27)))
PROCconfig_set_integer("DifferentCards",VAL($FNicon_indirection(options_window%,31)))
PROCconfig_set_integer("ViewDelay",VAL($FNicon_indirection(options_window%,37)))
:
PROCconfig_set_boolean("EditHuman",FNicon_selected(options_window%,7))
PROCconfig_set_boolean("EditComputer",FNicon_selected(options_window%,10))
PROCconfig_set_boolean("UseSound",FNicon_selected(options_window%,41))
:
IF save% THEN
 IF choices_save$="" THEN
  SYS "XOS_ReadVarVal","Choices$Write",0,-1,0,0 TO ,,new_choices%
  IF new_choices%<>0 THEN
   SYS "XOS_ReadVarVal","Choices$Write",q%,256,0,0 TO ,,len%
   q%?len%=13
   choices_save$=$q%+".Pairs"
   SYS "OS_File",17,choices_save$ TO object%
   IF object%=0 THEN SYS "OS_File",8,choices_save$
   choices_save$+=".Choices"
  ELSE
   choices_save$="<Pairs$Dir>.Choices"
  ENDIF
 ENDIF
 :
 PROCconfig_save_file(choices_save$)
ENDIF
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Name handling
REM ====================================================================================================================
:
:
:
:
DEF PROCstart_name_edit(icon%)
:
IF name_edit_icon%<>-1 THEN PROCend_name_edit(FALSE)
:
!q%=main_window%
q%!4=icon%
q%!8=&000E0024
q%!12=&000F0024
SYS "Wimp_SetIconState",,q%
:
SYS "Wimp_GetPointerInfo",,q%+100
SYS "Wimp_GetWindowState",,q%
xo%=q%!100-q%!4+q%!20-4
yo%=q%!104-q%!16+q%!24-4
SYS "Wimp_SetCaretPosition",window%,icon%,xo%,yo%,-1,-1
:
$FNicon_validation(main_window%,icon%)=name_edit_validation$(icon%-2)
:
name_edit_icon%=icon%
name_edit_old_contents$=$FNicon_indirection(window%,icon%)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCend_name_edit(save%)
:
IF save% THEN
 $FNicon_indirection(stats_window%,name_edit_icon%)=$FNicon_indirection(main_window%,name_edit_icon%)
 IF FNwindow_is_open(stats_window%) THEN PROCicon_redraw(stats_window%,name_edit_icon%)
ELSE
 $FNicon_indirection(main_window%,name_edit_icon%)=name_edit_old_contents$
ENDIF
:
!q%=main_window%
q%!4=name_edit_icon%
q%!8=&00000000
q%!12=&000F0024
SYS "Wimp_SetIconState",,q%
SYS "Wimp_SetCaretPosition",-1
PROCsize_main_icons(FALSE)
:
$FNicon_validation(main_window%,name_edit_icon%)=""
:
name_edit_icon%=-1
ENDPROC
:
:
:
:
REM ====================================================================================================================
REM Miscellaneous WIMP routines
REM ====================================================================================================================
:
:
:
:
DEF FNmessage_lookup(m$)
LOCAL e$
IF m$<>"" THEN SYS "MessageTrans_Lookup",message_block%,m$ TO ,,e$
=e$
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCforce_card_redraw(x%,y%)
:
REM Force a single card to redraw.
:
x%=x%*card_x%
y%=-y%*card_y%
:
SYS "Wimp_ForceRedraw",main_window%,x%+guttering%,y%-card_y%,x%+card_x%,y%-guttering%
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCcopy_icon_definition(window_block%,icon%,to%)
:
REM Copy an icon's definition from the end of a window definition to a new block
REM of memory.
:
LOCAL from%,loop%
:
from%=window_block%+88+(32*icon%)
FOR loop%=0 TO 28 STEP 4
 to%!loop%=from%!loop%
NEXT loop%
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCstart_drag_bar
:
REM Start the dragging in the options window.
:
dragging_options_bar%=TRUE
old_poll_mask%=poll_mask%
mouse_drag_x%=-1
poll_mask%=poll_mask% AND NOT %1
!b%=options_window%
SYS "Wimp_GetWindowState",,b%
!q%=options_window%
q%!4=15
SYS "Wimp_GetIconState",,q%
q%!24=b%!4+b%!20+q%!8
q%!28=q%!12+b%!16-b%!24
q%!32=b%!4+b%!20+q%!16
q%!36=q%!20+b%!16-b%!24
q%!4=7
SYS "Wimp_DragBox",,q%
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCget_mode_size
:
REM Set the variables screen_width% and screen_height% to be the width and height of the current
REM mode (in OS units), derived from the relevent Mode Variables.
:
LOCAL m%
:
SYS "OS_ReadModeVariable",-1,11 TO ,,m%
SYS "OS_ReadModeVariable",-1,4  TO ,,screen_xeig%
screen_width%=m%<<screen_xeig%
:
SYS "OS_ReadModeVariable",-1,12 TO ,,m%
SYS "OS_ReadModeVariable",-1,5  TO ,,screen_yeig%
screen_height%=m%<<screen_yeig%
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF FNodd_number(num%)=(num% MOD 2)=1
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
:
:
:
:
DEF PROCtick_menu_item(menu%,item%)
:
LOCAL loop%
:
loop%=0
REPEAT
 PROCmenu_set_state(menu%,loop%,loop%=item%,FALSE)
 loop%+=1
UNTIL (menu%!(28+24*(loop%-1)) AND &80)
ENDPROC

